name: HealthTrack CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # Job 1: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests & Code Coverage
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run unit tests
      run: mvn clean test
      
    - name: Generate code coverage report
      run: mvn jacoco:report
      
    - name: Check coverage threshold
      run: mvn jacoco:check
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: unit-tests-coverage

  # Job 2: Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run performance tests
      run: mvn test -Pperformance-tests
      
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: target/surefire-reports/

  # Job 3: Functional Tests
  functional-tests:
    runs-on: ubuntu-latest
    name: Functional Tests (Selenium)
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@latest
      
    - name: Setup ChromeDriver
      uses: nanasess/setup-chromedriver@master
      
    - name: Run functional tests
      run: mvn test -Pfunctional-tests
      env:
        TEST_BROWSER: chrome
        TEST_HEADLESS: true
        
    - name: Upload functional test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: functional-test-results
        path: target/surefire-reports/
        
    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: selenium-screenshots
        path: target/screenshots/

  # Job 4: Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    needs: [unit-tests]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Run tests with coverage
      run: mvn clean test jacoco:report
      
    - name: SonarQube Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          mvn sonar:sonar \
            -Dsonar.projectKey=healthtrack-platform \
            -Dsonar.organization=your-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
        else
          echo "SONAR_TOKEN not set, skipping SonarQube analysis"
        fi

  # Job 5: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [unit-tests, performance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run integration tests
      run: mvn test -Pintegration-tests
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: target/failsafe-reports/

  # Job 6: Build and Package
  build-package:
    runs-on: ubuntu-latest
    name: Build & Package
    needs: [unit-tests, performance-tests, functional-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile application
      run: mvn clean compile
      
    - name: Package application
      run: mvn package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifacts
        path: target/*.jar

  # Job 7: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP Dependency Check
      run: |
        mvn org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=7 \
          -DsuppressNoHighCVSSWarning=true
          
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.html

  # Job 8: Test Summary
  test-summary:
    runs-on: ubuntu-latest
    name: Test Results Summary
    needs: [unit-tests, performance-tests, functional-tests, integration-tests, build-package]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate test summary
      run: |
        echo "# Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Job Results:" >> test-summary.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "- Functional Tests: ${{ needs.functional-tests.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- Build Package: ${{ needs.build-package.result }}" >> test-summary.md
        echo "" >> test-summary.md
        
        if [ "${{ needs.unit-tests.result }}" = "success" ] && 
           [ "${{ needs.performance-tests.result }}" = "success" ] && 
           [ "${{ needs.functional-tests.result }}" = "success" ] && 
           [ "${{ needs.build-package.result }}" = "success" ]; then
          echo "## Overall Status: SUCCESS" >> test-summary.md
          echo "All tests passed successfully!" >> test-summary.md
        else
          echo "## Overall Status: FAILURE" >> test-summary.md
          echo "Some tests failed. Please check the individual job results." >> test-summary.md
        fi
        
        cat test-summary.md
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });