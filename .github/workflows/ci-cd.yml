name: HealthTrack CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    name: Test Suite & Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run unit tests
      run: mvn clean test
      
    - name: Generate coverage report
      run: mvn jacoco:report
      
    - name: Run performance tests
      run: mvn test -Pperformance-tests
      
    - name: Setup Chrome for Selenium
      uses: browser-actions/setup-chrome@v1
      
    - name: Run functional tests
      run: mvn test -Pfunctional-tests
      env:
        TEST_BROWSER: chrome
        TEST_HEADLESS: true
        
    - name: Build application
      run: mvn package -DskipTests
      
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          target/surefire-reports/
          target/site/jacoco/
          target/*.jar
        retention-days: 30
        
    - name: Check coverage
      run: mvn jacoco:check
      
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## Test Results Summary\n\n';
          comment += 'Unit Tests: Passed\n';
          comment += 'Performance Tests: Passed\n';
          comment += 'Functional Tests: Passed\n';
          comment += 'Build: Success\n\n';
          comment += 'Coverage report and artifacts available in the Actions tab.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });